{"version":3,"sources":["scripts/main.js"],"names":["rows","document","body","querySelectorAll","thead","querySelector","tbody","sortArrayAsString","array","columnNumber","sort","currentRow","nextRow","children","innerText","localeCompare","sortArrayAsNumbers","currentRowValue","nextRowValue","Number","startsWith","replaceSymbols","string","replace","addEventListener","clickEvent","targetColumn","target","closest","cellIndex","columnHeader","append"],"mappings":";AAAA,aAiCA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA9BA,IAAMA,EAAWC,EAAAA,SAASC,KAAKC,iBAAiB,eAC1CC,EAAQH,SAASI,cAAc,SAC/BC,EAAQL,SAASI,cAAc,SAErC,SAASE,EAAkBC,EAAOC,GAChCD,EAAME,KAAK,SAACC,EAAYC,GACfD,OAAAA,EAAWE,SAASJ,GAAcK,UAAUC,cACjDH,EAAQC,SAASJ,GAAcK,aAKrC,SAASE,EAAmBR,EAAOC,GACjCD,EAAME,KAAK,SAACC,EAAYC,GAClBK,IAAAA,EAAkBN,EAAWE,SAASJ,GAAcK,UACpDI,EAAeN,EAAQC,SAASJ,GAAcK,UAO3CK,OALHF,EAAgBG,WAAW,OAC7BH,EAAkBI,EAAeJ,GACjCC,EAAeG,EAAeH,IAGzBC,OAAOF,GAAmBE,OAAOD,KAI5C,SAASG,EAAeC,GACfA,OAAAA,EAAOC,QAAQ,SAAU,IAGlCnB,EAAMoB,iBAAiB,QAAS,SAACC,GACzBC,IAAAA,EAAeD,EAAWE,OAAOC,QAAQ,MAAMC,UAG7CC,OAFaL,EAAWE,OAAOb,WAGhC,IAAA,OACA,IAAA,WACHP,EAAkBP,EAAM0B,GACxB,MACG,IAAA,MACA,IAAA,SACHV,EAAmBhB,EAAM0B,GAE7BpB,EAAMyB,OAANzB,MAAAA,EAAgBN,EAAAA","file":"main.293507d2.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write code here\nconst rows = [...document.body.querySelectorAll('tbody > tr')];\nconst thead = document.querySelector('thead');\nconst tbody = document.querySelector('tbody');\n\nfunction sortArrayAsString(array, columnNumber) {\n  array.sort((currentRow, nextRow) => {\n    return currentRow.children[columnNumber].innerText.localeCompare(\n      nextRow.children[columnNumber].innerText\n    );\n  });\n}\n\nfunction sortArrayAsNumbers(array, columnNumber) {\n  array.sort((currentRow, nextRow) => {\n    let currentRowValue = currentRow.children[columnNumber].innerText;\n    let nextRowValue = nextRow.children[columnNumber].innerText;\n\n    if (currentRowValue.startsWith('$')) {\n      currentRowValue = replaceSymbols(currentRowValue);\n      nextRowValue = replaceSymbols(nextRowValue);\n    }\n\n    return Number(currentRowValue) - Number(nextRowValue);\n  });\n}\n\nfunction replaceSymbols(string) {\n  return string.replace(/[$,]+/g, '');\n}\n\nthead.addEventListener('click', (clickEvent) => {\n  const targetColumn = clickEvent.target.closest('th').cellIndex;\n  const columnHeader = clickEvent.target.innerText;\n\n  switch (columnHeader) {\n    case 'Name':\n    case 'Position':\n      sortArrayAsString(rows, targetColumn);\n      break;\n    case 'Age':\n    case 'Salary':\n      sortArrayAsNumbers(rows, targetColumn);\n  }\n  tbody.append(...rows);\n});\n"]}